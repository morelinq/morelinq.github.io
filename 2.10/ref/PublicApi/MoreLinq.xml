<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MoreLinq</name>
  </assembly>
  <members>
    <member name="T:MoreLinq.MoreEnumerable">
      <summary>
            Provides a set of static methods for querying objects that 
            implement <see cref="T:System.Collections.Generic.IEnumerable`1" />. The actual methods
            are implemented in files reflecting the method name.
            </summary>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Acquire``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Ensures that a source sequence of <see cref="T:System.IDisposable" /> 
            objects are all acquired successfully. If the acquisition of any 
            one <see cref="T:System.IDisposable" /> fails then those successfully 
            acquired till that point are disposed.
            </summary>
      <param name="source">Source sequence of <see cref="T:System.IDisposable" /> objects.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>
            Returns an array of all the acquired <see cref="T:System.IDisposable" />
            object and in source order.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AggregateRight``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies a right-associative accumulator function over a sequence.
            This operator is the right-associative version of the 
            <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> LINQ operator.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="func">A right-associative accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <returns>The final accumulator value.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AggregateRight``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
      <summary>
            Applies a right-associative accumulator function over a sequence.
            The specified seed value is used as the initial accumulator value.
            This operator is the right-associative version of the 
            <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> LINQ operator.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">A right-associative accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <returns>The final accumulator value.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AggregateRight``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1},System.Func{``1,``2})">
      <summary>
            Applies a right-associative accumulator function over a sequence.
            The specified seed value is used as the initial accumulator value, 
            and the specified function is used to select the result value.
            This operator is the right-associative version of the 
            <see cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" /> LINQ operator.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">A right-associative accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <returns>The transformed final accumulator value.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Assert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Asserts that all elements of a sequence meet a given condition
            otherwise throws an <see cref="T:System.Exception" /> object.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="predicate">Function that asserts an element of the <paramref name="source" /> sequence for a condition.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>
            Returns the original sequence.
            </returns>
      <exception cref="T:System.InvalidOperationException">The input sequence
            contains an element that does not meet the condition being 
            asserted.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Assert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Exception})">
      <summary>
            Asserts that all elements of a sequence meet a given condition
            otherwise throws an <see cref="T:System.Exception" /> object.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="predicate">Function that asserts an element of the input sequence for a condition.</param>
      <param name="errorSelector">Function that returns the <see cref="T:System.Exception" /> object to throw.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>
            Returns the original sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AssertCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Asserts that a source sequence contains a given count of elements.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="count">Count to assert.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>
            Returns the original sequence as long it is contains the
            number of elements specified by <paramref name="count" />.
            Otherwise it throws <see cref="T:System.Exception" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AssertCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Int32,System.Exception})">
      <summary>
            Asserts that a source sequence contains a given count of elements.
            A parameter specifies the exception to be thrown.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="count">Count to assert.</param>
      <param name="errorSelector">Function that returns the <see cref="T:System.Exception" /> object to throw.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>
            Returns the original sequence as long it is contains the
            number of elements specified by <paramref name="count" />.
            Otherwise it throws the <see cref="T:System.Exception" /> object
            returned by calling <paramref name="errorSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Determines whether or not the number of elements in the sequence is greater than
            or equal to the given integer.
            </summary>
      <param name="source">The source sequence</param>
      <param name="count">The minimum number of items a sequence must have for this
            function to return true</param>
      <typeparam name="T">Element type of sequence</typeparam>
      <returns>
        <c>true</c> if the number of elements in the sequence is greater than
            or equal to the given integer or <c>false</c> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.AtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Determines whether or not the number of elements in the sequence is lesser than
            or equal to the given integer.
            </summary>
      <param name="source">The source sequence</param>
      <param name="count">The maximun number of items a sequence must have for this
            function to return true</param>
      <typeparam name="T">Element type of sequence</typeparam>
      <returns>
        <c>true</c> if the number of elements in the sequence is lesser than
            or equal to the given integer or <c>false</c> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Batches the source sequence into sized buckets.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="size">Size of buckets.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>A sequence of equally sized buckets containing elements of the source collection.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Batch``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Batches the source sequence into sized buckets and applies a projection to each bucket.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="size">Size of buckets.</param>
      <param name="resultSelector">The projection to apply to each bucket.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <typeparam name="TResult">Type of result returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A sequence of projections on equally sized buckets containing elements of the source collection.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Returns the Cartesian product of two sequences by combining each element of the first set with each in the second
            and applying the user=define projection to the pair.
            </summary>
      <param name="first">The first sequence of elements</param>
      <param name="second">The second sequence of elements</param>
      <param name="resultSelector">A projection function that combines elements from both sequences</param>
      <typeparam name="TFirst">The type of the elements of <paramref name="first" /></typeparam>
      <typeparam name="TSecond">The type of the elements of <paramref name="second" /></typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
      <returns>A sequence representing the Cartesian product of the two source sequences</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Returns a sequence consisting of the head elements and the given tail element.
            </summary>
      <param name="head">All elements of the head. Must not be null.</param>
      <param name="tail">Tail element of the new sequence.</param>
      <typeparam name="T">Type of sequence</typeparam>
      <returns>A sequence consisting of the head elements and the given tail element.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a sequence consisting of the head element and the given tail elements.
            </summary>
      <param name="head">Head element of the new sequence.</param>
      <param name="tail">All elements of the tail. Must not be null.</param>
      <typeparam name="T">Type of sequence</typeparam>
      <returns>A sequence consisting of the head elements and the given tail elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Consume``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Completely consumes the given sequence. This method uses immediate execution,
            and doesn't store any data during execution.
            </summary>
      <param name="source">Source to consume</param>
      <typeparam name="T">Element type of the sequence</typeparam>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.CountBetween``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary>
            Determines whether or not the number of elements in the sequence is between 
            an inclusive range of minimum and maximum integers.
            </summary>
      <param name="source">The source sequence</param>
      <param name="min">The minimum number of items a sequence must have for this
            function to return true</param>
      <param name="max">The maximun number of items a sequence must have for this
            function to return true</param>
      <typeparam name="T">Element type of sequence</typeparam>
      <returns>
        <c>true</c> if the number of elements in the sequence is between (inclusive)
            the min and max given integers or <c>false</c> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="min" /> is negative or <paramref name="max" /> is less than min</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Applies a key-generating function to each element of a sequence and returns a sequence of 
            unique keys and their number of occurrences in the original sequence.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="keySelector">Function that transforms each item of source sequence into a key to be compared against the others.</param>
      <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
      <typeparam name="TKey">Type of the projected element.</typeparam>
      <returns>A sequence of unique keys and their number of occurrences in the original sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Applies a key-generating function to each element of a sequence and returns a sequence of 
            unique keys and their number of occurrences in the original sequence.
            An additional argument specifies a comparer to use for testing equivalence of keys.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="keySelector">Function that transforms each item of source sequence into a key to be compared against the others.</param>
      <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <typeparamref name="TSource" /> is used.</param>
      <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
      <typeparam name="TKey">Type of the projected element.</typeparam>
      <returns>A sequence of unique keys and their number of occurrences in the original sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the default equality comparer for the projected type.
            </summary>
      <param name="source">Source sequence</param>
      <param name="keySelector">Projection for determining "distinctness"</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the specified comparer for the projected type.
            </summary>
      <param name="source">Source sequence</param>
      <param name="keySelector">Projection for determining "distinctness"</param>
      <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether the end of the first sequence is equivalent to
            the second sequence, using the default equality comparer.
            </summary>
      <param name="first">The sequence to check.</param>
      <param name="second">The sequence to compare to.</param>
      <typeparam name="T">Type of elements.</typeparam>
      <returns>
        <c>true</c> if <paramref name="first" /> ends with elements
            equivalent to <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether the end of the first sequence is equivalent to
            the second sequence, using the specified element equality comparer.
            </summary>
      <param name="first">The sequence to check.</param>
      <param name="second">The sequence to compare to.</param>
      <param name="comparer">Equality comparer to use.</param>
      <typeparam name="T">Type of elements.</typeparam>
      <returns>
        <c>true</c> if <paramref name="first" /> ends with elements
            equivalent to <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.EquiZip``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element 
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="third">Third sequence</param>
      <param name="fourth">Fourth sequence</param>
      <param name="resultSelector">Function to apply to each quadruplet of elements</param>
      <typeparam name="T1">Type of elements in first sequence</typeparam>
      <typeparam name="T2">Type of elements in second sequence</typeparam>
      <typeparam name="T3">Type of elements in third sequence</typeparam>
      <typeparam name="T4">Type of elements in fourth sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>
            A sequence that contains elements of the four input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.EquiZip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element 
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="third">Third sequence</param>
      <param name="resultSelector">Function to apply to each triplet of elements</param>
      <typeparam name="T1">Type of elements in first sequence</typeparam>
      <typeparam name="T2">Type of elements in second sequence</typeparam>
      <typeparam name="T3">Type of elements in third sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>
            A sequence that contains elements of the three input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.EquiZip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="resultSelector">Function to apply to each pair of elements</param>
      <typeparam name="TFirst">Type of elements in first sequence</typeparam>
      <typeparam name="TSecond">Type of elements in second sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>
            A sequence that contains elements of the two input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Evaluate``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
      <summary>
            Returns a sequence containing the values resulting from invoking (in order) each function in the source sequence of functions.
            </summary>
      <param name="functions">The functions to evaluate.</param>
      <typeparam name="T">The type of the object returned by the functions.</typeparam>
      <returns>A sequence with results from invoking <paramref name="functions" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="functions" /> is <c>null</c>.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Exactly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Determines whether or not the number of elements in the sequence is equals to the given integer.
            </summary>
      <param name="source">The source sequence</param>
      <param name="count">The exactly number of items a sequence must have for this
            function to return true</param>
      <typeparam name="T">Element type of sequence</typeparam>
      <returns>
        <c>true</c> if the number of elements in the sequence is equals
            to the given integer or <c>false</c> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the set of elements in the first sequence which aren't
            in the second sequence, according to a given key selector.
            </summary>
      <param name="first">The sequence of potentially included elements.</param>
      <param name="second">The sequence of elements whose keys may prevent elements in
            <paramref name="first" /> from being returned.</param>
      <param name="keySelector">The mapping from source element to key.</param>
      <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A sequence of elements from <paramref name="first" /> whose key was not also a key for
            any element in <paramref name="second" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the set of elements in the first sequence which aren't
            in the second sequence, according to a given key selector.
            </summary>
      <param name="first">The sequence of potentially included elements.</param>
      <param name="second">The sequence of elements whose keys may prevent elements in
            <paramref name="first" /> from being returned.</param>
      <param name="keySelector">The mapping from source element to key.</param>
      <param name="keyComparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
      <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A sequence of elements from <paramref name="first" /> whose key was not also a key for
            any element in <paramref name="second" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary>
            Excludes a contiguous number of elements from a sequence starting
            at a given index.
            </summary>
      <param name="sequence">The sequence to exclude elements from</param>
      <param name="startIndex">The zero-based index at which to begin excluding elements</param>
      <param name="count">The number of elements to exclude</param>
      <typeparam name="T">The type of the elements of the sequence</typeparam>
      <returns>A sequence that excludes the specified portion of elements</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an altenate sequence of values.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fallback">The alternate sequence that is returned
            if <paramref name="source" /> is empty.</param>
      <typeparam name="T">The type of the elements in the sequences.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Returns the elements of the specified sequence or the specified
            value in a singleton collection if the sequence is empty.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fallback">The value to return in a singleton
            collection if <paramref name="source" /> is empty.</param>
      <typeparam name="T">The type of the elements in the sequences.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="fallback" />
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
      <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an altenate sequence of values.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <typeparam name="T">The type of the elements in the sequences.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0)">
      <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an altenate sequence of values.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <param name="fallback3">Third value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <typeparam name="T">The type of the elements in the sequences.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0,``0)">
      <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an altenate sequence of values.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <param name="fallback3">Third value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <param name="fallback4">Fourth value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
      <typeparam name="T">The type of the elements in the sequences.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0[])">
      <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an altenate sequence from an array of values.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fallback">The array that is returned as the alternate
            sequence if <paramref name="source" /> is empty.</param>
      <typeparam name="T">The type of the elements in the sequences.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FillBackward``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a sequence with each null reference or value in the source
            replaced with the following non-null reference or value in
            that sequence.
            </summary>
      <param name="source">The source sequence.</param>
      <typeparam name="T">Type of the elements in the source sequence.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with null references or values
            replaced.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FillBackward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns a sequence with each missing element in the source replaced
            with the following non-missing element in that sequence. An
            additional parameter specifies a function used to determine if an
            element is considered missing or not.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
      <typeparam name="T">Type of the elements in the source sequence.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FillBackward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})">
      <summary>
            Returns a sequence with each missing element in the source replaced
            with the following non-missing element in that sequence. Additional
            parameters specifiy two functions, one used to determine if an
            element is considered missing or not and another to provide the
            replacement for the missing element.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
      <param name="fillSelector">The function used to produce the element
            that will replace the missing one. It receives the next non-missing
            element as well as the current element considered missing.</param>
      <typeparam name="T">Type of the elements in the source sequence.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing elements filled.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FillForward``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a sequence with each null reference or value in the source
            replaced with the previous non-null reference or value seen in
            that sequence.
            </summary>
      <param name="source">The source sequence.</param>
      <typeparam name="T">Type of the elements in the source sequence.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with null references or values
            replaced.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FillForward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns a sequence with each missing element in the source replaced
            with the previous non-missing element seen in that sequence. An
            additional parameter specifies a function used to determine if an
            element is considered missing or not.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
      <typeparam name="T">Type of the elements in the source sequence.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FillForward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})">
      <summary>
            Returns a sequence with each missing element in the source replaced
            with one based on the previous non-missing element seen in that
            sequence. Additional parameters specifiy two functions, one used to
            determine if an element is considered missing or not and another
            to provide the replacement for the missing element.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
      <param name="fillSelector">The function used to produce the element
            that will replace the missing one. It receives the previous
            non-missing element as well as the current element considered
            missing.</param>
      <typeparam name="T">Type of the elements in the source sequence.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Flatten(System.Collections.IEnumerable)">
      <summary>
            Flattens a sequence containing arbitrarily-nested sequences.
            </summary>
      <param name="source">The sequence that will be flattened.</param>
      <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences (except strings).
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Flatten(System.Collections.IEnumerable,System.Func{System.Collections.IEnumerable,System.Boolean})">
      <summary>
            Flattens a sequence containing arbitrarily-nested sequences. An
            additional parameter specifies a predicate function used to
            determine whether a nested <see cref="T:System.Collections.IEnumerable" /> should be
            flattened or not.
            </summary>
      <param name="source">The sequence that will be flattened.</param>
      <param name="predicate">
            A function that receives each element that implements
            <see cref="T:System.Collections.IEnumerable" /> and indicates if its elements should be
            recursively flattened into the resulting sequence.
            </param>
      <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences for which the predicate function
            returned <c>true</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            9 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 9 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            10 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 10 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            11 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 11 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            12 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 12 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            13 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 13 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            14 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 14 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            15 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 15 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            16 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 16 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            1 element.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 1 element</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            2 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 2 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            3 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 3 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            4 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 4 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            5 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 5 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            6 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 6 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            7 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 7 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``1})">
      <summary>
            Returns the result of applying a function to a sequence of
            8 elements.
            </summary>
      <param name="source">The sequence of items to fold.</param>
      <param name="folder">Function to apply to the elements in the sequence.</param>
      <typeparam name="T">Type of element in the source sequence</typeparam>
      <typeparam name="TResult">Type of the result</typeparam>
      <returns>The folded value returned by <paramref name="folder" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="folder" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain exactly 8 elements</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
      <param name="source">The sequence of elements</param>
      <param name="action">The action to execute on each element</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary>
            Immediately executes the given action on each element in the source sequence.
            Each element's index is used in the logic of the action.
            </summary>
      <param name="source">The sequence of elements</param>
      <param name="action">The action to execute on each element; the second parameter
            of the action represents the index of the source element.</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0})">
      <summary>
            Returns a single-element sequence containing the result of invoking the function.
            </summary>
      <param name="function">The function to evaluate.</param>
      <typeparam name="T">The type of the object returned by the function.</typeparam>
      <returns>A sequence with the value resulting from invoking <paramref name="function" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0},System.Func{``0})">
      <summary>
            Returns a sequence containing the result of invoking each parameter function in order.
            </summary>
      <param name="function1">The first function to evaluate.</param>
      <param name="function2">The second function to evaluate.</param>
      <typeparam name="T">The type of the object returned by the functions.</typeparam>
      <returns>A sequence with the values resulting from invoking <paramref name="function1" /> and <paramref name="function2" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0},System.Func{``0},System.Func{``0})">
      <summary>
            Returns a sequence containing the result of invoking each parameter function in order.
            </summary>
      <param name="function1">The first function to evaluate.</param>
      <param name="function2">The second function to evaluate.</param>
      <param name="function3">The third function to evaluate.</param>
      <typeparam name="T">The type of the object returned by the functions.</typeparam>
      <returns>A sequence with the values resulting from invoking <paramref name="function1" />, <paramref name="function2" /> and <paramref name="function3" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0}[])">
      <summary>
            Returns a sequence containing the values resulting from invoking (in order) each function in the source sequence of functions.
            </summary>
      <param name="functions">The functions to evaluate.</param>
      <typeparam name="T">The type of the object returned by the functions.</typeparam>
      <returns>A sequence with the values resulting from invoking all of the <paramref name="functions" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="functions" /> is <c>null</c>.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2})">
      <summary>
            Performs a Full Group Join between the <paramref name="first" /> and <paramref name="second" /> sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="firstKeySelector">The mapping from first sequence to key</param>
      <param name="secondKeySelector">The mapping from second sequence to key</param>
      <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
      <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
      <typeparam name="TKey">The type of the key to use to join</typeparam>
      <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
            Performs a Full Group Join between the <paramref name="first" /> and <paramref name="second" /> sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="firstKeySelector">The mapping from first sequence to key</param>
      <param name="secondKeySelector">The mapping from second sequence to key</param>
      <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TKey</c> is used.</param>
      <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
      <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
      <typeparam name="TKey">The type of the key to use to join</typeparam>
      <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
            Performs a full group-join between two sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="firstKeySelector">The mapping from first sequence to key</param>
      <param name="secondKeySelector">The mapping from second sequence to key</param>
      <param name="resultSelector">Function to apply to each pair of elements plus the key</param>
      <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
      <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
      <typeparam name="TKey">The type of the key to use to join</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence</typeparam>
      <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
            Performs a full group-join between two sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="firstKeySelector">The mapping from first sequence to key</param>
      <param name="secondKeySelector">The mapping from second sequence to key</param>
      <param name="resultSelector">Function to apply to each pair of elements plus the key</param>
      <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TKey</c> is used.</param>
      <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
      <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
      <typeparam name="TKey">The type of the key to use to join</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence</typeparam>
      <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
      <summary>
            Performs a full outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
      <param name="first">
            The first sequence to join fully.</param>
      <param name="second">
            The second sequence to join fully.</param>
      <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
      <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
            Performs a full outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
      <param name="first">
            The first sequence to join fully.</param>
      <param name="second">
            The second sequence to join fully.</param>
      <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
      <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
      <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
      <summary>
            Performs a full outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
      <param name="first">
            The first sequence to join fully.</param>
      <param name="second">
            The second sequence to join fully.</param>
      <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.FullJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Performs a full outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
      <param name="first">
            The first sequence to join fully.</param>
      <param name="second">
            The second sequence to join fully.</param>
      <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
      <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Generate``1(``0,System.Func{``0,``0})">
      <summary>
            Returns a sequence of values consecutively generated by a generator function.
            </summary>
      <param name="initial">Value of first element in sequence</param>
      <param name="generator">
            Generator function which takes the previous series element and uses it to generate the next element.
            </param>
      <typeparam name="TResult">Type of elements to generate.</typeparam>
      <returns>A sequence containing the generated values.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GenerateByIndex``1(System.Func{System.Int32,``0})">
      <summary>
            Returns a sequence of values based on indexes.
            </summary>
      <param name="generator">Generation function to apply to each index</param>
      <typeparam name="TResult">Type of result to generate</typeparam>
      <returns>A sequence </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Groups the adjacent elements of a sequence according to a 
            specified key selector function.
            </summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each 
            element.</param>
      <typeparam name="TSource">The type of the elements of 
            <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by 
            <paramref name="keySelector" />.</typeparam>
      <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements in the same order as found in the 
            source sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the adjacent elements of a sequence according to a 
            specified key selector function and compares the keys by using a 
            specified comparer.
            </summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each 
            element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to 
            compare keys.</param>
      <typeparam name="TSource">The type of the elements of 
            <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by 
            <paramref name="keySelector" />.</typeparam>
      <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements in the same order as found in the 
            source sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Groups the adjacent elements of a sequence according to a 
            specified key selector function and projects the elements for 
            each group by using a specified function.
            </summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each 
            element.</param>
      <param name="elementSelector">A function to map each source 
            element to an element in the resulting grouping.</param>
      <typeparam name="TSource">The type of the elements of 
            <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by 
            <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the
            resulting groupings.</typeparam>
      <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements (of type <typeparamref name="TElement" />) 
            in the same order as found in the source sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the adjacent elements of a sequence according to a 
            specified key selector function. The keys are compared by using 
            a comparer and each group's elements are projected by using a 
            specified function.
            </summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each 
            element.</param>
      <param name="elementSelector">A function to map each source 
            element to an element in the resulting grouping.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to 
            compare keys.</param>
      <typeparam name="TSource">The type of the elements of 
            <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by 
            <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the
            resulting groupings.</typeparam>
      <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements (of type <typeparamref name="TElement" />) 
            in the same order as found in the source sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>
            Groups the adjacent elements of a sequence according to a 
            specified key selector function. The keys are compared by using 
            a comparer and each group's elements are projected by using a 
            specified function.
            </summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each 
            element.</param>
      <param name="resultSelector">A function to map each key and
            associated source elements to a result object.</param>
      <typeparam name="TSource">The type of the elements of 
            <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by 
            <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements in the
            resulting sequence.</typeparam>
      <returns>A collection of elements of type
            <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the adjacent elements of a sequence according to a 
            specified key selector function. The keys are compared by using 
            a comparer and each group's elements are projected by using a 
            specified function.
            </summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each 
            element.</param>
      <param name="resultSelector">A function to map each key and
            associated source elements to a result object.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to 
            compare keys.</param>
      <typeparam name="TSource">The type of the elements of 
            <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by 
            <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements in the
            resulting sequence.</typeparam>
      <returns>A collection of elements of type
            <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Incremental``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary>
            Computes an incremental value between every adjacent element in a sequence: {N,N+1}, {N+1,N+2}, ...
            </summary>
      <param name="sequence">The sequence of elements to incrementally process</param>
      <param name="resultSelector">A projection applied to each pair of adjacent elements in the sequence</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
      <returns>A sequence of elements resulting from projection every adjacent pair</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Incremental``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32,``1})">
      <summary>
            Computes an incremental value between every adjacent element in a sequence: {N,N+1}, {N+1,N+2}, ...
            </summary>
      <param name="sequence">The sequence of elements to incrementally process</param>
      <param name="resultSelector">A projection applied to each pair of adjacent elements in the sequence</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
      <returns>A sequence of elements resulting from projection every adjacent pair</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 
            where the key is the zero-based index of the value in the source 
            sequence.
            </summary>
      <param name="source">The source sequence.</param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 
            where the key is the index of the value in the source sequence.
            An additional parameter specifies the starting index.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="startIndex"></param>
      <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
      <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Inserts the elements of a sequence into another sequence at a
            specified index.
            </summary>
      <param name="first">The source sequence.</param>
      <param name="second">The sequence that will be inserted.</param>
      <param name="index">
            The zero-based index at which to insert elements from
            <paramref name="second" />.</param>
      <typeparam name="T">Type of the elements of the source sequence.</typeparam>
      <returns>
            A sequence that contains the elements of <paramref name="first" />
            plus the elements of <paramref name="second" /> inserted at
            the given index.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="second" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown lazily if <paramref name="index" /> is greater than the
            length of <paramref name="first" />. The validation occurs when
            yielding the next element after having iterated
            <paramref name="first" /> entirely.
            </exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Interleaves the elements of two or more sequences into a single sequence, skipping sequences as they are consumed
            </summary>
      <param name="sequence">The first sequence in the interleave group</param>
      <param name="otherSequences">The other sequences in the interleave group</param>
      <typeparam name="T">The type of the elements of the source sequences</typeparam>
      <returns>A sequence of interleaved elements from all of the source sequences</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Lag``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,``1})">
      <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a negative offset.
            </summary>
      <param name="source">The sequence over which to evaluate lag</param>
      <param name="offset">The offset (expressed as a positive number) by which to lag each value of the sequence</param>
      <param name="resultSelector">A projection function which accepts the current and lagged items (in that order) and returns a result</param>
      <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
      <returns>A sequence produced by projecting each element of the sequence with its lagged pairing</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Lag``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,System.Func{``0,``0,``1})">
      <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a negative offset.
            </summary>
      <param name="source">The sequence over which to evaluate lag</param>
      <param name="offset">The offset (expressed as a positive number) by which to lag each value of the sequence</param>
      <param name="defaultLagValue">A default value supplied for the lagged value prior to the lag offset</param>
      <param name="resultSelector">A projection function which accepts the current and lagged items (in that order) and returns a result</param>
      <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
      <returns>A sequence produced by projecting each element of the sequence with its lagged pairing</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Lead``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,``1})">
      <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a positive offset.
            </summary>
      <param name="source">The sequence over which to evaluate Lead</param>
      <param name="offset">The offset (expressed as a positive number) by which to lead each element of the sequence</param>
      <param name="resultSelector">A projection function which accepts the current and subsequent (lead) element (in that order) and produces a result</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
      <returns>A sequence produced by projecting each element of the sequence with its lead pairing</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Lead``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,System.Func{``0,``0,``1})">
      <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a positive offset.
            </summary>
      <param name="source">The sequence over which to evaluate Lead</param>
      <param name="offset">The offset (expressed as a positive number) by which to lead each element of the sequence</param>
      <param name="defaultLeadValue">A default value supplied for the leading element when none is available</param>
      <param name="resultSelector">A projection function which accepts the current and subsequent (lead) element (in that order) and produces a result</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
      <returns>A sequence produced by projecting each element of the sequence with its lead pairing</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``0,``1,``3})">
      <summary>
            Performs a left outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
      <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
            Performs a left outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
      <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
      <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.LeftJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2})">
      <summary>
            Performs a left outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.LeftJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Performs a left outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
      <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
      <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the maximal element of the given sequence, based on
            the given projection.
            </summary>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <returns>The maximal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the maximal element of the given sequence, based on
            the given projection and the specified comparer for projected values. 
            </summary>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <param name="comparer">Comparer to use to compare projected values</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <returns>The maximal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="selector" /> 
            or <paramref name="comparer" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the minimal element of the given sequence, based on
            the given projection.
            </summary>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <returns>The minimal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the minimal element of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <param name="comparer">Comparer to use to compare projected values</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <returns>The minimal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="selector" /> 
            or <paramref name="comparer" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Move``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns a sequence with a range of elements in the source sequence
            moved to a new offset.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="fromIndex">
            The zero-based index identifying the first element in the range of
            elements to move.</param>
      <param name="count">The count of items to move.</param>
      <param name="toIndex">
            The index where the specified range will be moved.</param>
      <typeparam name="T">Type of the source sequence.</typeparam>
      <returns>
            A sequence with the specified range moved to the new position.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.NestedLoops(System.Action,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Produces a sequence from an action based on the dynamic generation of N nested loops
            whose iteration counts are defined by a sequence of loop counts.
            </summary>
      <param name="action">Action delegate for which to produce a nested loop sequence</param>
      <param name="loopCounts">A sequence of loop repetition counts</param>
      <returns>A sequence of Action representing the expansion of a set of nested loops</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)">
      <summary>
            Sorts the elements of a sequence in a particular direction (ascending, descending) according to a key
            </summary>
      <param name="source">The sequence to order</param>
      <param name="keySelector">A key selector function</param>
      <param name="direction">A direction in which to order the elements (ascending, descending)</param>
      <typeparam name="T">The type of the elements in the source sequence</typeparam>
      <typeparam name="TKey">The type of the key used to order elements</typeparam>
      <returns>An ordered copy of the source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
      <summary>
            Sorts the elements of a sequence in a particular direction (ascending, descending) according to a key
            </summary>
      <param name="source">The sequence to order</param>
      <param name="keySelector">A key selector function</param>
      <param name="direction">A direction in which to order the elements (ascending, descending)</param>
      <param name="comparer">A comparer used to define the semantics of element comparison</param>
      <typeparam name="T">The type of the elements in the source sequence</typeparam>
      <typeparam name="TKey">The type of the key used to order elements</typeparam>
      <returns>An ordered copy of the source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Merges two ordered sequences into one. Where the elements equal
            in both sequences, the element from the first sequence is
            returned in the resulting sequence.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <typeparam name="T">Type of elements in input and output sequences.</typeparam>
      <returns>
            A sequence with elements from the two input sequences merged, as
            in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Merges two ordered sequences into one with an additional
            parameter specifying how to compare the elements of the
            sequences. Where the elements equal in both sequences, the
            element from the first sequence is returned in the resulting
            sequence.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
      <typeparam name="T">Type of elements in input and output sequences.</typeparam>
      <returns>
            A sequence with elements from the two input sequences merged, as
            in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Merges two ordered sequences into one with an additional
            parameter specifying the element key by which the sequences are
            ordered. Where the keys equal in both sequences, the
            element from the first sequence is returned in the resulting
            sequence.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <param name="keySelector">Function to extract a key given an element.</param>
      <typeparam name="T">Type of elements in input and output sequences.</typeparam>
      <typeparam name="TKey">Type of keys used for merging.</typeparam>
      <returns>
            A sequence with elements from the two input sequences merged
            according to a key, as in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
      <summary>
            Merges two ordered sequences into one. Additional parameters
            specify the element key by which the sequences are ordered,
            the result when element is found in first sequence but not in
            the second, the result when element is found in second sequence
            but not in the first and the result when elements are found in
            both sequences.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <param name="keySelector">Function to extract a key given an element.</param>
      <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
      <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
      <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
      <typeparam name="T">Type of elements in source sequences.</typeparam>
      <typeparam name="TKey">Type of keys used for merging.</typeparam>
      <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
      <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>
            Merges two ordered sequences into one. Additional parameters
            specify the element key by which the sequences are ordered,
            the result when element is found in first sequence but not in
            the second, the result when element is found in second sequence
            but not in the first, the result when elements are found in
            both sequences and a method for comparing keys.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <param name="keySelector">Function to extract a key given an element.</param>
      <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
      <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
      <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="T">Type of elements in source sequences.</typeparam>
      <typeparam name="TKey">Type of keys used for merging.</typeparam>
      <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
      <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
      <summary>
            Merges two heterogeneous sequences ordered by a common key type
            into a homogeneous one. Additional parameters specify the
            element key by which the sequences are ordered, the result when
            element is found in first sequence but not in the second and
            the result when element is found in second sequence but not in
            the first, the result when elements are found in both sequences.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <param name="firstKeySelector">Function to extract a key given an
            element from the first sequence.</param>
      <param name="secondKeySelector">Function to extract a key given an
            element from the second sequence.</param>
      <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
      <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
      <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
      <typeparam name="TFirst">Type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">Type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">Type of keys used for merging.</typeparam>
      <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
      <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
      <summary>
            Merges two heterogeneous sequences ordered by a common key type
            into a homogeneous one. Additional parameters specify the
            element key by which the sequences are ordered, the result when
            element is found in first sequence but not in the second,
            the result when element is found in second sequence but not in
            the first, the result when elements are found in both sequences
            and a method for comparing keys.
            </summary>
      <param name="first">The first input sequence.</param>
      <param name="second">The second input sequence.</param>
      <param name="firstKeySelector">Function to extract a key given an
            element from the first sequence.</param>
      <param name="secondKeySelector">Function to extract a key given an
            element from the second sequence.</param>
      <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
      <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
      <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TFirst">Type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">Type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">Type of keys used for merging.</typeparam>
      <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
      <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Pads a sequence with default values if it is narrower (shorter 
            in length) than a given width.
            </summary>
      <param name="source">The sequence to pad.</param>
      <param name="width">The width/length below which to pad.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
      <summary>
            Pads a sequence with a dynamic filler value if it is narrower (shorter 
            in length) than a given width.
            </summary>
      <param name="source">The sequence to pad.</param>
      <param name="width">The width/length below which to pad.</param>
      <param name="paddingSelector">Function to calculate padding.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
      <summary>
            Pads a sequence with a given filler value if it is narrower (shorter 
            in length) than a given width.
            </summary>
      <param name="source">The sequence to pad.</param>
      <param name="width">The width/length below which to pad.</param>
      <param name="padding">The value to use for padding.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Pads a sequence with default values in the beginning if it is narrower (shorter 
            in length) than a given width.
            </summary>
      <param name="source">The sequence to pad.</param>
      <param name="width">The width/length below which to pad.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
      <summary>
            Pads a sequence with a dynamic filler value in the beginning if it is narrower (shorter 
            in length) than a given width.
            An additional parameter specifies the function to calculate padding.
            </summary>
      <param name="source">The sequence to pad.</param>
      <param name="width">The width/length below which to pad.</param>
      <param name="paddingSelector">Function to calculate padding.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
      <summary>
            Pads a sequence with a given filler value in the beginning if it is narrower (shorter 
            in length) than a given width.
            An additional parameter specifies the value to use for padding.
            </summary>
      <param name="source">The sequence to pad.</param>
      <param name="width">The width/length below which to pad.</param>
      <param name="padding">The value to use for padding.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary>
            Returns a sequence resulting from applying a function to each 
            element in the source sequence and its 
            predecessor, with the exception of the first element which is 
            only returned as the predecessor of the second element.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="resultSelector">A transform function to apply to 
            each pair of sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
      <returns>
            Returns the resulting sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <typeparam name="T">Type of elements in the sequence.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in their ascending order.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,MoreLinq.OrderByDirection)">
      <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            An additional parameter specifies the direction of the sort
            </summary>
      <param name="source">The source sequence.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <param name="direction">The direction in which to sort the elements</param>
      <typeparam name="T">Type of elements in the sequence.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation. An additional parameter specifies how the
            elements compare to each other.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
      <typeparam name="T">Type of elements in the sequence.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in their ascending order.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IComparer{``0},MoreLinq.OrderByDirection)">
      <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            Additional parameters specify how the elements compare to each other and
            the direction of the sort.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
      <param name="direction">The direction in which to sort the elements</param>
      <typeparam name="T">Type of elements in the sequence.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1})">
      <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <typeparam name="TSource">Type of elements in the sequence.</typeparam>
      <typeparam name="TKey">Type of keys.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in ascending order of their keys.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},MoreLinq.OrderByDirection)">
      <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            An additional parameter specifies the direction of the sort
            </summary>
      <param name="source">The source sequence.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <param name="direction">The direction in which to sort the elements</param>
      <typeparam name="TSource">Type of elements in the sequence.</typeparam>
      <typeparam name="TKey">Type of keys.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order of their keys.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            An additional parameter specifies how the keys compare to each other.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
      <typeparam name="TSource">Type of elements in the sequence.</typeparam>
      <typeparam name="TKey">Type of keys.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in ascending order of their keys.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
      <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            Additional parameters specify how the elements compare to each other and
            the direction of the sort.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="count">Number of (maximum) elements to return.</param>
      <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
      <param name="direction">The direction in which to sort the elements</param>
      <typeparam name="TSource">Type of elements in the sequence.</typeparam>
      <typeparam name="TKey">Type of keys.</typeparam>
      <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order of their keys.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Boolean,``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Partitions a grouping by Boolean keys into a projection of true
            elements and false elements, respectively.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="resultSelector">
            Function that projects the result from sequences of true elements
            and false elements, respectively, passed as arguments.
            </param>
      <typeparam name="T">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Nullable{System.Boolean},``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Partitions a grouping by nullable Boolean keys into a projection of
            true elements, false elements and null elements, respectively.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="resultSelector">
            Function that projects the result from sequences of true elements,
            false elements and null elements, respectively, passed as
            arguments.
            </param>
      <typeparam name="T">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
      <summary>
            Partitions a grouping and projects a result from group elements
            matching a key and those groups that do not. An additional parameter
            specifies how to compare keys for equality.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="key">The key to partition on.</param>
      <param name="comparer">The comparer for keys.</param>
      <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
      <typeparam name="TKey">Type of keys in source groupings.</typeparam>
      <typeparam name="TElement">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
      <summary>
            Partitions a grouping and projects a result from group elements
            matching a key and those groups that do not.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="key">The key to partition.</param>
      <param name="resultSelector">
            Function that projects the result from sequences of elements
            matching <paramref name="key" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
      <typeparam name="TKey">Type of keys in source groupings.</typeparam>
      <typeparam name="TElement">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
      <summary>
            Partitions a grouping and projects a result from elements of
            groups matching a set of two keys and those groups that do not.
            An additional parameter specifies how to compare keys for equality.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="key1">The first key to partition on.</param>
      <param name="key2">The second key to partition on.</param>
      <param name="comparer">The comparer for keys.</param>
      <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key1" />, elements of the group matching
            <paramref name="key2" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
      <typeparam name="TKey">Type of keys in source groupings.</typeparam>
      <typeparam name="TElement">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
      <summary>
            Partitions a grouping and projects a result from elements of
            groups matching a set of two keys and those groups that do not.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="key1">The first key to partition on.</param>
      <param name="key2">The second key to partition on.</param>
      <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key1" />, elements of the group matching
            <paramref name="key2" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
      <typeparam name="TKey">Type of keys in source groupings.</typeparam>
      <typeparam name="TElement">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
      <summary>
            Partitions a grouping and projects a result from elements groups
            matching a set of three keys and those groups that do not. An
            additional parameter specifies how to compare keys for equality.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="key1">The first key to partition on.</param>
      <param name="key2">The second key to partition on.</param>
      <param name="key3">The third key to partition on.</param>
      <param name="comparer">The comparer for keys.</param>
      <param name="resultSelector">
            Function that projects the result from elements of groups
            matching <paramref name="key1" />, <paramref name="key2" /> and
            <paramref name="key3" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
      <typeparam name="TKey">Type of keys in source groupings.</typeparam>
      <typeparam name="TElement">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
      <summary>
            Partitions a grouping and projects a result from elements groups
            matching a set of three keys and those groups that do not.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="key1">The first key to partition on.</param>
      <param name="key2">The second key to partition on.</param>
      <param name="key3">The third key to partition on.</param>
      <param name="resultSelector">
            Function that projects the result from elements of groups
            matching <paramref name="key1" />, <paramref name="key2" /> and
            <paramref name="key3" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
      <typeparam name="TKey">Type of keys in source groupings.</typeparam>
      <typeparam name="TElement">Type of elements in source groupings.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Partitions or splits a sequence in two using a predicate.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="predicate">The predicate function.</param>
      <typeparam name="T">Type of source elements.</typeparam>
      <returns>
            A tuple of elements staisfying the predicate and those that do not,
            respectively.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Partition``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Partitions or splits a sequence in two using a predicate and then
            projects a result from the two.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="predicate">The predicate function.</param>
      <param name="resultSelector">
            Function that projects the result from sequences of elements that
            satisfy the predicate and those that do not, respectively, passed as
            arguments.
            </param>
      <typeparam name="T">Type of source elements.</typeparam>
      <typeparam name="TResult">Type of the result.</typeparam>
      <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Generates a sequence of lists that represent the permutations of the original sequence.
            </summary>
      <param name="sequence">The original sequence to permute</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of lists representing permutations of the original sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Pipe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Executes the given action on each element in the source sequence
            and yields it.
            </summary>
      <param name="source">The sequence of elements</param>
      <param name="action">The action to execute on each element</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence with source elements in their original order.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Prepends a single value to a sequence.
            </summary>
      <param name="source">The sequence to prepend to.</param>
      <param name="value">The value to prepend.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            Returns a sequence where a value is prepended to it.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
      <summary>
            Performs a pre-scan (exclusive prefix sum) on a sequence of elements.
            </summary>
      <param name="source">Source sequence</param>
      <param name="transformation">Transformation operation</param>
      <param name="identity">Identity element (see remarks)</param>
      <typeparam name="TSource">Type of elements in source sequence</typeparam>
      <returns>The scanned sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Random">
      <summary>
            Returns an infinite sequence of random integers using the standard 
            .NET random number generator.
            </summary>
      <returns>An infinite sequence of random integers</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Random(System.Int32)">
      <summary>
            Returns an infinite sequence of random integers between zero and
            a given maximum.
            </summary>
      <param name="maxValue">exclusive upper bound for the random values returned</param>
      <returns>An infinite sequence of random integers</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Random(System.Int32,System.Int32)">
      <summary>
            Returns an infinite sequence of random integers between a given
            minimum and a maximum.
            </summary>
      <param name="minValue">Inclusive lower bound of the values returned</param>
      <param name="maxValue">Exclusive upper bound of the values returned</param>
      <returns>An infinite sequence of random integers</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Random(System.Random)">
      <summary>
            Returns an infinite sequence of random integers using the supplied
            random number generator.
            </summary>
      <param name="rand">Random generator used to produce random numbers</param>
      <returns>An infinite sequence of random integers</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Random(System.Random,System.Int32)">
      <summary>
            Returns an infinite sequence of random integers between zero and a
            given maximum using the supplied random number generator.
            </summary>
      <param name="rand">Random generator used to produce values</param>
      <param name="maxValue">Exclusive upper bound for random values returned</param>
      <returns>An infinite sequence of random integers</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Random(System.Random,System.Int32,System.Int32)">
      <summary>
            Returns an infinite sequence of random integers between a given
            minumum and a maximum using the supplied random number generator.
            </summary>
      <param name="rand">Generator used to produce random numbers</param>
      <param name="minValue">Inclusive lower bound of the values returned</param>
      <param name="maxValue">Exclusive upper bound of the values returned</param>
      <returns>An infinite sequence of random integers</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RandomDouble">
      <summary>
            Returns an infinite sequence of random double values between 0.0 and 1.0
            </summary>
      <returns>An infinite sequence of random doubles</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RandomDouble(System.Random)">
      <summary>
            Returns an infinite sequence of random double values between 0.0 and 1.0
            using the supplied random number generator.
            </summary>
      <param name="rand">Generator used to produce random numbers</param>
      <returns>An infinite sequence of random doubles</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns a sequence of a specified size of random elements from the original sequence
            </summary>
      <param name="sequence">The sequence from which to return random elements</param>
      <param name="subsetSize">The size of the random subset to return</param>
      <typeparam name="T">The type of elements in the sequence</typeparam>
      <returns>A random sequence of elements in random order from the original sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
      <summary>
            Returns a sequence of a specified size of random elements from the original sequence
            </summary>
      <param name="sequence">The sequence from which to return random elements</param>
      <param name="subsetSize">The size of the random subset to return</param>
      <param name="rand">A random generator used as part of the selection algorithm</param>
      <typeparam name="T">The type of elements in the sequence</typeparam>
      <returns>A random sequence of elements in random order from the original sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Rank``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Ranks each item in the sequence in descending ordering using a default comparer.
            </summary>
      <param name="source">The sequence whose items will be ranked</param>
      <typeparam name="TSource">Type of item in the sequence</typeparam>
      <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Rank``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Rank each item in the sequence using a caller-supplied comparer.
            </summary>
      <param name="source">The sequence of items to rank</param>
      <param name="comparer">A object that defines comparison semantics for the elements in the sequence</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RankBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Ranks each item in the sequence in descending ordering by a specified key using a default comparer
            </summary>
      <param name="source">The sequence of items to rank</param>
      <param name="keySelector">A key selector function which returns the value by which to rank items in the sequence</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <typeparam name="TKey">The type of the key used to rank items in the sequence</typeparam>
      <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RankBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Ranks each item in a sequence using a specified key and a caller-supplied comparer
            </summary>
      <param name="source">The sequence of items to rank</param>
      <param name="keySelector">A key selector function which returns the value by which to rank items in the sequence</param>
      <param name="comparer">An object that defines the comparison semantics for keys used to rank items</param>
      <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
      <typeparam name="TKey">The type of the key used to rank items in the sequence</typeparam>
      <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Repeat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats the sequence forever.
            </summary>
      <param name="sequence">The sequence to repeat</param>
      <typeparam name="T">Type of elements in sequence</typeparam>
      <returns>A sequence produced from the infinite repetition of the original source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Repeats the sequence the specified number of times.
            </summary>
      <param name="sequence">The sequence to repeat</param>
      <param name="count">Number of times to repeat the sequence</param>
      <typeparam name="T">Type of elements in sequence</typeparam>
      <returns>A sequence produced from the repetition of the original source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``1,``3},System.Func{``0,``1,``3})">
      <summary>
            Performs a right outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
      <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
            Performs a right outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
      <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
      <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
      <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RightJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2})">
      <summary>
            Performs a right outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RightJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Performs a right outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
      <param name="first">
            The first sequence of the join operation.</param>
      <param name="second">
            The second sequence of the join operation.</param>
      <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
      <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
      <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
      <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
      <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
      <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
      <typeparam name="TResult">
            The type of the result elements.</typeparam>
      <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RunLengthEncode``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Run-length encodes a sequence by converting consecutive instances of the same element into
            a <c>KeyValuePair{T,int}</c> representing the item and its occurrence count.
            </summary>
      <param name="sequence">The sequence to run length encode</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of <c>KeyValuePair{T,int}</c> where the key is the element and the value is the occurrence count</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.RunLengthEncode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Run-length encodes a sequence by converting consecutive instances of the same element into
            a <c>KeyValuePair{T,int}</c> representing the item and its occurrence count. This overload
            uses a custom equality comparer to identify equivalent items.
            </summary>
      <param name="sequence">The sequence to run length encode</param>
      <param name="comparer">The comparer used to identify equivalent items</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of <c>KeyValuePair{T,int}</c> where they key is the element and the value is the occurrence count</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Peforms a scan (inclusive prefix sum) on a sequence of elements.
            </summary>
      <param name="source">Source sequence</param>
      <param name="transformation">Transformation operation</param>
      <typeparam name="TSource">Type of elements in source sequence</typeparam>
      <returns>The scanned sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Like <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> except returns 
            the sequence of intermediate results as well as the final one. 
            An additional parameter specifies a seed.
            </summary>
      <param name="source">Source sequence</param>
      <param name="seed">Initial state to seed</param>
      <param name="transformation">Transformation operation</param>
      <typeparam name="TSource">Type of elements in source sequence</typeparam>
      <typeparam name="TState">Type of state</typeparam>
      <returns>The scanned sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ScanRight``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Peforms a right-associative scan (inclusive prefix) on a sequence of elements.
            This operator is the right-associative version of the 
            <see cref="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> LINQ operator.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="func">
            A right-associative accumulator function to be invoked on each element.
            Its first argument is the current value in the sequence; second argument is the previous accumulator value.
            </param>
      <typeparam name="TSource">Type of elements in source sequence.</typeparam>
      <returns>The scanned sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ScanRight``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
      <summary>
            Peforms a right-associative scan (inclusive prefix) on a sequence of elements.
            The specified seed value is used as the initial accumulator value.
            This operator is the right-associative version of the 
            <see cref="M:MoreLinq.MoreEnumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> LINQ operator.
            </summary>
      <param name="source">Source sequence.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">A right-associative accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <returns>The scanned sequence.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
      <param name="source">The sequence to segment</param>
      <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given element begins a new segment, and <c>false</c> otherwise</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
      <param name="source">The sequence to segment</param>
      <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given element or index indicate a new segment, and <c>false</c> otherwise</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32,System.Boolean})">
      <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
      <param name="source">The sequence to segment</param>
      <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given current element, previous element or index indicate a new segment, and <c>false</c> otherwise</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Sequence(System.Int32,System.Int32)">
      <summary>
            Generates a sequence of integral numbers within the (inclusive) specified range.
            If sequence is ascending the step is +1, otherwise -1.
            </summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="stop">The value of the last integer in the sequence.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a range of sequential integral numbers.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Sequence(System.Int32,System.Int32,System.Int32)">
      <summary>
            Generates a sequence of integral numbers within the (inclusive) specified range.
            An additional parameter specifies the steps in which the integers of the sequence increase or decrease.
            </summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="stop">The value of the last integer in the sequence.</param>
      <param name="step">The step to define the next number.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a range of sequential integral numbers.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.SingleOrFallback``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
      <summary>
            Returns the single element in the given sequence, or the result
            of executing a fallback delegate if the sequence is empty.
            This method throws an exception if there is more than one element in the sequence.
            </summary>
      <param name="source">The source sequence</param>
      <param name="fallback">The fallback delegate to execute if the sequence is empty</param>
      <typeparam name="TSource">Element type of sequence</typeparam>
      <returns>The single element in the sequence, or the result of calling the
            fallback delegate if the sequence is empty.</returns>
      <exception cref="T:System.ArgumentNullException">source or fallback is null</exception>
      <exception cref="T:System.InvalidOperationException">The sequence has more than one element</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of elements at the end of the sequence.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="count">The number of elements to bypass at the end of the source sequence.</param>
      <typeparam name="T">Type of the source sequence</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the source sequence elements except for the bypassed ones at the end.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.SkipUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Skips items from the input sequence until the given predicate returns true
            when applied to the current source item; that item will be the last skipped.
            </summary>
      <param name="source">Source sequence</param>
      <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <returns>Items from the source sequence after the predicate first returns true when applied to the item.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary>
            Extracts a contiguous count of elements from a sequence at a particular zero-based starting index
            </summary>
      <param name="sequence">The sequence from which to extract elements</param>
      <param name="startIndex">The zero-based index at which to begin slicing</param>
      <param name="count">The number of items to slice out of the index</param>
      <typeparam name="T">The type of the elements in the source sequence</typeparam>
      <returns>A new sequence containing any elements sliced out from the source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.SortedMerge``1(System.Collections.Generic.IEnumerable{``0},MoreLinq.OrderByDirection,System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Merges two or more sequences that are in a common order (either ascending or descending) into
            a single sequence that preserves that order.
            </summary>
      <param name="source">The primary sequence with which to merge</param>
      <param name="direction">The ordering that all sequences must already exhibit</param>
      <param name="comparer">The comparer used to evaluate the relative order between elements</param>
      <param name="otherSequences">A variable argument array of zero or more other sequences to merge with</param>
      <typeparam name="TSource">The type of the elements in the sequence</typeparam>
      <returns>A merged, order-preserving sequence containing al of the elements of the original sequences</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.SortedMerge``1(System.Collections.Generic.IEnumerable{``0},MoreLinq.OrderByDirection,System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Merges two or more sequences that are in a common order (either ascending or descending) into
            a single sequence that preserves that order.
            </summary>
      <param name="source">The primary sequence with which to merge</param>
      <param name="direction">The ordering that all sequences must already exhibit</param>
      <param name="otherSequences">A variable argument array of zero or more other sequences to merge with</param>
      <typeparam name="TSource">The type of the elements of the sequence</typeparam>
      <returns>A merged, order-preserving sequence containing all of the elements of the original sequences</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Splits the source sequence by separator elements identified by a
            function.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <returns>A sequence of splits of elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Splits the source sequence by separator elements identified by
            a function and then transforms the splits into results.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
      <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <typeparam name="TResult">Type of the result sequence elements.</typeparam>
      <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
      <summary>
            Splits the source sequence by separator elements identified by a
            function, given a maximum count of splits.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
      <param name="count">Maximum number of splits.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <returns>A sequence of splits of elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Splits the source sequence by separator elements identified by
            a function, given a maximum count of splits, and then transforms
            the splits into results.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
      <param name="count">Maximum number of splits.</param>
      <param name="resultSelector">Function used to project a split
            group of source elements into an element of the resulting sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <typeparam name="TResult">Type of the result sequence elements.</typeparam>
      <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Splits the source sequence by a separator.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <returns>A sequence of splits of elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Splits the source sequence by a separator and then transforms the
            splits into results.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="comparer">Comparer used to determine separator
            element equality.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <returns>A sequence of splits of elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Splits the source sequence by a separator and then transforms the
            splits into results. A parameter specifies how the separator is
            compared for equality.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="comparer">Comparer used to determine separator
            element equality.</param>
      <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <typeparam name="TResult">Type of the result sequence elements.</typeparam>
      <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
      <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits. A parameter specifies how the separator is compared
            for equality.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="comparer">Comparer used to determine separator
            element equality.</param>
      <param name="count">Maximum number of splits.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <returns>A sequence of splits of elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits, and then transforms the splits into results. A
            parameter specifies how the separator is compared for equality.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="comparer">Comparer used to determine separator
            element equality.</param>
      <param name="count">Maximum number of splits.</param>
      <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <typeparam name="TResult">Type of the result sequence elements.</typeparam>
      <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Splits the source sequence by a separator and then transforms
            the splits into results.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <typeparam name="TResult">Type of the result sequence elements.</typeparam>
      <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
      <summary>
            Splits the source sequence by a separator given a maximum count of splits.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="count">Maximum number of splits.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <returns>A sequence of splits of elements.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits, and then transforms the splits into results.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="separator">Separator element.</param>
      <param name="count">Maximum number of splits.</param>
      <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
      <typeparam name="TSource">Type of element in the source sequence.</typeparam>
      <typeparam name="TResult">Type of the result sequence elements.</typeparam>
      <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether the beginning of the first sequence is
            equivalent to the second sequence, using the default equality
            comparer.
            </summary>
      <param name="first">The sequence to check.</param>
      <param name="second">The sequence to compare to.</param>
      <typeparam name="T">Type of elements.</typeparam>
      <returns>
        <c>true</c> if <paramref name="first" /> begins with elements
            equivalent to <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether the beginning of the first sequence is
            equivalent to the second sequence, using the specified element
            equality comparer.
            </summary>
      <param name="first">The sequence to check.</param>
      <param name="second">The sequence to compare to.</param>
      <param name="comparer">Equality comparer to use.</param>
      <typeparam name="T">Type of elements.</typeparam>
      <returns>
        <c>true</c> if <paramref name="first" /> begins with elements
            equivalent to <paramref name="second" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Subsets``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.IList`1" /> representing all of
            the subsets of any size that are part of the original sequence. In
            mathematics, it is equivalent to the <em>power set</em> of a set.
            </summary>
      <param name="sequence">Sequence for which to produce subsets</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of lists that represent the all subsets of the original sequence</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <see langword="null" /></exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Subsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.IList`1" /> representing all
            subsets of a given size that are part of the original sequence. In
            mathematics, it is equivalent to the <em>combinations</em> or
            <em>k-subsets</em> of a set.
            </summary>
      <param name="sequence">Sequence for which to produce subsets</param>
      <param name="subsetSize">The size of the subsets to produce</param>
      <typeparam name="T">The type of the elements in the sequence</typeparam>
      <returns>A sequence of lists that represents of K-sized subsets of the original sequence</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="sequence" /> is <see langword="null" /></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="subsetSize" /> is less than zero.
            </exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.TagFirstLast``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,System.Boolean,``1})">
      <summary>
            Returns a sequence resulting from applying a function to each 
            element in the source sequence with additional parameters 
            indicating whether the element is the first and/or last of the 
            sequence.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="resultSelector">A function that determines how to 
            project the each element along with its first or last tag.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
      <returns>
            Returns the resulting sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns every N-th element of a sequence.
            </summary>
      <param name="source">Source sequence</param>
      <param name="step">Number of elements to bypass before returning the next element.</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <returns>
            A sequence with every N-th element of the input sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous elements from the end of 
            a sequence.
            </summary>
      <param name="source">The sequence to return the last element of.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of 
            elements from the end of the input sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns items from the input sequence until the given predicate returns true
            when applied to the current source item; that item will be the last returned.
            </summary>
      <param name="source">Source sequence</param>
      <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <returns>Items from the source sequence, until the predicate returns true when applied to the item.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)">
      <summary>
            Performs a subsequent ordering of elements in a sequence in a particular direction (ascending, descending) according to a key
            </summary>
      <param name="source">The sequence to order</param>
      <param name="keySelector">A key selector function</param>
      <param name="direction">A direction in which to order the elements (ascending, descending)</param>
      <typeparam name="T">The type of the elements in the source sequence</typeparam>
      <typeparam name="TKey">The type of the key used to order elements</typeparam>
      <returns>An ordered copy of the source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
      <summary>
            Performs a subsequent ordering of elements in a sequence in a particular direction (ascending, descending) according to a key
            </summary>
      <param name="source">The sequence to order</param>
      <param name="keySelector">A key selector function</param>
      <param name="direction">A direction in which to order the elements (ascending, descending)</param>
      <param name="comparer">A comparer used to define the semantics of element comparison</param>
      <typeparam name="T">The type of the elements in the source sequence</typeparam>
      <typeparam name="TKey">The type of the key used to order elements</typeparam>
      <returns>An ordered copy of the source sequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array.
            </summary>
      <param name="source">The source sequence for the array.</param>
      <param name="indexSelector">
            A function that maps an element to its index.</param>
      <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
      <returns>
            An array that contains the elements from the input sequence. The
            size of the array will be as large as the highest index returned
            by the <paramref name="indexSelector" /> plus 1.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Func{``0,``1})">
      <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array. The elements are projected into the array
            via an additional function.
            </summary>
      <param name="source">The source sequence for the array.</param>
      <param name="indexSelector">
            A function that maps an element to its index.</param>
      <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
      <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
      <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
      <returns>
            An array that contains the projected elements from the input
            sequence. The size of the array will be as large as the highest
            index returned by the <paramref name="indexSelector" /> plus 1.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Func{``0,System.Int32,``1})">
      <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array. The elements are projected into the array
            via an additional function.
            </summary>
      <param name="source">The source sequence for the array.</param>
      <param name="indexSelector">
            A function that maps an element to its index.</param>
      <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
      <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
      <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
      <returns>
            An array that contains the projected elements from the input
            sequence. The size of the array will be as large as the highest
            index returned by the <paramref name="indexSelector" /> plus 1.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
      <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array.
            </summary>
      <param name="source">The source sequence for the array.</param>
      <param name="length">The (non-negative) length of the resulting array.</param>
      <param name="indexSelector">
            A function that maps an element to its index.</param>
      <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
      <returns>
            An array of size <paramref name="length" /> that contains the
            elements from the input sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Func{``0,``1})">
      <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array. The
            elements are projected into the array via an additional function.
            </summary>
      <param name="source">The source sequence for the array.</param>
      <param name="length">The (non-negative) length of the resulting array.</param>
      <param name="indexSelector">
            A function that maps an element to its index.</param>
      <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
      <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
      <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
      <returns>
            An array of size <paramref name="length" /> that contains the
            projected elements from the input sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Func{``0,System.Int32,``1})">
      <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array. The
            elements are projected into the array via an additional function.
            </summary>
      <param name="source">The source sequence for the array.</param>
      <param name="length">The (non-negative) length of the resulting array.</param>
      <param name="indexSelector">
            A function that maps an element to its index.</param>
      <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
      <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
      <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
      <returns>
            An array of size <paramref name="length" /> that contains the
            projected elements from the input sequence.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts a sequence to a <see cref="T:System.Data.DataTable" /> object.
            </summary>
      <param name="source">The source.</param>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" /> 
            object with a set of lambda expressions specifying which members (property
            or field) of each element in the sequence will supply the column values.
            </summary>
      <param name="source">The source.</param>
      <param name="expressions">Expressions providing access to element members.</param>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1)">
      <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" /> object.
            </summary>
      <param name="source">The source.</param>
      <param name="table"></param>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TTable"></typeparam>
      <returns>
            A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" /> 
            object with a set of lambda expressions specifying which members (property
            or field) of each element in the sequence will supply the column values.
            </summary>
      <param name="source">The source.</param>
      <param name="table">The <see cref="T:System.Data.DataTable" /> type of object where to add rows</param>
      <param name="expressions">Expressions providing access to element members.</param>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TTable">The type of the input and resulting <see cref="T:System.Data.DataTable" /> object.</typeparam>
      <returns>
            A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Boolean})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Boolean},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Byte})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Char})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Char},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Decimal},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Double},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int16})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int16},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.SByte})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.SByte},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Single},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt16})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt16},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt32})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt32},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt64})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates a delimited string from a sequence of values. The
            delimiter used depends on the current culture of the executing thread.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <typeparam name="TSource">Type of element in the source sequence</typeparam>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <see cref="P:System.Globalization.TextInfo.ListSeparator" />. If the source
            sequence is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
      <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
      <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
      <typeparam name="TSource">Type of element in the source sequence</typeparam>
      <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements.
            </summary>
      <param name="source">The source sequence of key-value pairs.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements. An additional
            parameter specifies a comparer for keys.
            </summary>
      <param name="source">The source sequence of key-value pairs.</param>
      <param name="comparer">The comparer for keys.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
      <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value.
            </summary>
      <param name="source">The source sequence of couples (tuple of 2).</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value. An additional parameter specifies a comparer for keys.
            </summary>
      <param name="source">The source sequence of couples (tuple of 2).</param>
      <param name="comparer">The comparer for keys.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the default equality
            comparer for the type.
            </summary>
      <param name="source">Source sequence</param>
      <typeparam name="TSource">Type of elements in source sequence.</typeparam>
      <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the specified equality
            comparer for the type.
            </summary>
      <param name="source">Source sequence</param>
      <param name="comparer">Equality comparer to use; a value of null will cause the type's default equality comparer to be used</param>
      <typeparam name="TSource">Type of elements in source sequence.</typeparam>
      <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null</exception>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements.
            </summary>
      <param name="source">The source sequence of key-value pairs.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:System.Linq.ILookup`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements. An additional
            parameter specifies a comparer for keys.
            </summary>
      <param name="source">The source sequence of key-value pairs.</param>
      <param name="comparer">The comparer for keys.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:System.Linq.ILookup`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
      <summary>
            Creates a <see cref="T:MoreLinq.Lookup`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value.
            </summary>
      <param name="source">The source sequence of tuples of 2.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:MoreLinq.Lookup`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Creates a <see cref="T:MoreLinq.Lookup`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value. An additional parameter specifies a comparer for keys.
            </summary>
      <param name="source">The source sequence of tuples of 2.</param>
      <param name="comparer">The comparer for keys.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>
            A <see cref="T:MoreLinq.Lookup`2" /> containing the values
            mapped to their keys.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Traces the elements of a source sequence for diagnostics.
            </summary>
      <param name="source">Source sequence whose elements to trace.</param>
      <typeparam name="TSource">Type of element in the source sequence</typeparam>
      <returns>
            Return the source sequence unmodified.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
      <summary>
            Traces the elements of a source sequence for diagnostics using
            a custom formatter.
            </summary>
      <param name="source">Source sequence whose elements to trace.</param>
      <param name="formatter">Function used to format each source element into a string.</param>
      <typeparam name="TSource">Type of element in the source sequence</typeparam>
      <returns>
            Return the source sequence unmodified.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Traces the elements of a source sequence for diagnostics using
            custom formatting.
            </summary>
      <param name="source">Source sequence whose elements to trace.</param>
      <param name="format">
            String to use to format the trace message. If null then the
            element value becomes the traced message.
            </param>
      <typeparam name="TSource">Type of element in the source sequence</typeparam>
      <returns>
            Return the source sequence unmodified.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Traverses a tree in a breadth-first fashion, starting at a root node and using a user-defined
            function to get the children at each node of the tree.
            </summary>
      <param name="root">The root of the tree to traverse</param>
      <param name="childrenSelector">The function that produces the children of each element</param>
      <typeparam name="T">The tree node type</typeparam>
      <returns>A sequence containing the traversed values</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.TraverseDepthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Traverses a tree in a depth-first fashion, starting at a root node and using a user-defined
            function to get the children at each node of the tree.
            </summary>
      <param name="root">The root of the tree to traverse</param>
      <param name="childrenSelector">The function that produces the children of each element</param>
      <typeparam name="T">The tree node type</typeparam>
      <returns>A sequence containing the traversed values</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Unfold``3(``0,System.Func{``0,``1},System.Func{``1,System.Boolean},System.Func{``1,``0},System.Func{``1,``2})">
      <summary>
            Returns a sequence generated by applying a state to the generator function, 
            and from its result, determines if the sequence should have a next element, its value,
            and the next state in the recursive call.
            </summary>
      <param name="state">The initial state.</param>
      <param name="generator">
            Function that takes a state and computes the next state and the next element of the sequence.
            </param>
      <param name="predicate">
            Function to determine if the unfolding should continue based the
            result of the <paramref name="generator" /> function.
            </param>
      <param name="stateSelector">
            Function to select the state from the output of the <paramref name="generator" /> function.
            </param>
      <param name="resultSelector">
            Function to select the result from the output of the <paramref name="generator" /> function.
            </param>
      <typeparam name="TState">Type of state elements.</typeparam>
      <typeparam name="T">Type of the elements generated by the generator function.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
      <returns>A sequence containing the results generated by the <paramref name="resultSelector" /> function.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.Windowed``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Processes a sequence into a series of subsequences representing a windowed subset of the original
            </summary>
      <param name="source">The sequence to evaluate a sliding window over</param>
      <param name="size">The size (number of elements) in each window</param>
      <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
      <returns>A series of sequences representing each sliding window subsequence</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ZipLongest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="resultSelector">Function to apply to each pair of elements</param>
      <typeparam name="TFirst">Type of elements in first sequence</typeparam>
      <typeparam name="TSecond">Type of elements in second sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>
            A sequence that contains elements of the two input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ZipShortest``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element 
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="third">Third sequence</param>
      <param name="fourth">Fourth sequence</param>
      <param name="resultSelector">Function to apply to each quadruplet of elements</param>
      <typeparam name="T1">Type of elements in first sequence</typeparam>
      <typeparam name="T2">Type of elements in second sequence</typeparam>
      <typeparam name="T3">Type of elements in third sequence</typeparam>
      <typeparam name="T4">Type of elements in fourth sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>A projection of tuples, where each tuple contains the N-th element from each of the argument sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ZipShortest``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element 
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="third">Third sequence</param>
      <param name="resultSelector">Function to apply to each triplet of elements</param>
      <typeparam name="T1">Type of elements in first sequence</typeparam>
      <typeparam name="T2">Type of elements in second sequence</typeparam>
      <typeparam name="T3">Type of elements in third sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>A projection of tuples, where each tuple contains the N-th element from each of the argument sequences.</returns>
    </member>
    <member name="M:MoreLinq.MoreEnumerable.ZipShortest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Returns a projection of tuples, where each tuple contains the N-th element 
            from each of the argument sequences.
            </summary>
      <param name="first">First sequence</param>
      <param name="second">Second sequence</param>
      <param name="resultSelector">Function to apply to each pair of elements</param>
      <typeparam name="TFirst">Type of elements in first sequence</typeparam>
      <typeparam name="TSecond">Type of elements in second sequence</typeparam>
      <typeparam name="TResult">Type of elements in result sequence</typeparam>
      <returns>A projection of tuples, where each tuple contains the N-th element from each of the argument sequences</returns>
    </member>
    <member name="T:MoreLinq.OrderByDirection">
      <summary>
            Enumeration that defines values representing valid ordering directions for a sequence.
            </summary>
    </member>
    <member name="F:MoreLinq.OrderByDirection.Ascending">
      <summary>
            Elements are ordered by increasing value
            </summary>
    </member>
    <member name="F:MoreLinq.OrderByDirection.Descending">
      <summary>
            Elements are ordered by decreasing value
            </summary>
    </member>
    <member name="T:MoreLinq.SequenceException">
      <summary>
            The exception that is thrown for a sequence that fails a condition.
            </summary>
    </member>
    <member name="M:MoreLinq.SequenceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class. 
            </summary>
    </member>
    <member name="M:MoreLinq.SequenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class
            with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:MoreLinq.SequenceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class
            with a given error message. 
            </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:MoreLinq.SequenceException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class
            with a given error message and a reference to the inner exception
            that is the cause of the exception.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
  </members>
</doc>