<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ExperimentalEnumerable.TrySingle(T, TCardinality) Method (IEnumerable(T), TCardinality, TCardinality, TCardinality)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:MoreLinq.Experimental.ExperimentalEnumerable.TrySingle``2(System.Collections.Generic.IEnumerable{``0},``1,``1,``1)" /><meta name="Description" content="Returns a tuple with the cardinality of the sequence and the single element in the sequence if it contains exactly one element. similar to ." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="MoreLinq.Experimental" /><meta name="file" content="M_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle__2" /><meta name="guid" content="M_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle__2" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MoreLinq<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\N_MoreLinq.htm" title="MoreLinq" tocid="roottoc">MoreLinq</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MoreLinq_Experimental.htm" title="MoreLinq.Experimental" tocid="N_MoreLinq_Experimental">MoreLinq.Experimental</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MoreLinq_Experimental_ExperimentalEnumerable.htm" title="ExperimentalEnumerable Class" tocid="T_MoreLinq_Experimental_ExperimentalEnumerable">ExperimentalEnumerable Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MoreLinq_Experimental_ExperimentalEnumerable.htm" title="ExperimentalEnumerable Methods" tocid="Methods_T_MoreLinq_Experimental_ExperimentalEnumerable">ExperimentalEnumerable Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle.htm" title="TrySingle Method " tocid="Overload_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle">TrySingle Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle__2.htm" title="TrySingle(T, TCardinality) Method (IEnumerable(T), TCardinality, TCardinality, TCardinality)" tocid="M_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle__2">TrySingle(T, TCardinality) Method (IEnumerable(T), TCardinality, TCardinality, TCardinality)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle__3.htm" title="TrySingle(T, TCardinality, TResult) Method (IEnumerable(T), TCardinality, TCardinality, TCardinality, Func(TCardinality, T, TResult))" tocid="M_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle__3">TrySingle(T, TCardinality, TResult) Method (IEnumerable(T), TCardinality, TCardinality, TCardinality, Func(TCardinality, T, TResult))</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>ExperimentalEnumerable<span id="LST16620DC2_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_0?cpp=::|nu=.");</script>TrySingle<span id="LST16620DC2_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span>, <span class="typeparameter">TCardinality</span><span id="LST16620DC2_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Method (IEnumerable<span id="LST16620DC2_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_3?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span><span id="LST16620DC2_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_4?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, <span class="typeparameter">TCardinality</span>, <span class="typeparameter">TCardinality</span>, <span class="typeparameter">TCardinality</span>)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Returns a tuple with the cardinality of the sequence and the
            single element in the sequence if it contains exactly one element.
            similar to <span class="nolink">Single<span id="LST16620DC2_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_5?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TSource<span id="LST16620DC2_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_6?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(IEnumerable<span id="LST16620DC2_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_7?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TSource<span id="LST16620DC2_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_8?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</span>.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_MoreLinq_Experimental.htm">MoreLinq.Experimental</a><br />
    <strong>Assembly:</strong>
   MoreLinq (in MoreLinq.dll) Version: 3.3.1+b77df70598ab84c28cd43dcf74594024b6d575e1<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> (TCardinality , T , , , T1 , T2 ,  ,  ) <span class="identifier">TrySingle</span>&lt;T, TCardinality&gt;(
	<span class="keyword">this</span> <span class="identifier">IEnumerable</span>&lt;T&gt; <span class="parameter">source</span>,
	TCardinality <span class="parameter">zero</span>,
	TCardinality <span class="parameter">one</span>,
	TCardinality <span class="parameter">many</span>
)
</pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">ExtensionAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">TrySingle</span>(<span class="keyword">Of</span> T, TCardinality) ( 
	<span class="parameter">source</span> <span class="keyword">As</span> <span class="identifier">IEnumerable</span>(<span class="keyword">Of</span> T),
	<span class="parameter">zero</span> <span class="keyword">As</span> TCardinality,
	<span class="parameter">one</span> <span class="keyword">As</span> TCardinality,
	<span class="parameter">many</span> <span class="keyword">As</span> TCardinality
) <span class="keyword">As</span> ( As TCardinality,  As T, , ,  As T1,  As T2,  As ,  As )</pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
[<span class="identifier">ExtensionAttribute</span>]
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TCardinality&gt;
<span class="keyword">static</span> <span class="identifier">ValueTuple</span>&lt;TCardinality, T&gt; <span class="identifier">TrySingle</span>(
	<span class="identifier">IEnumerable</span>&lt;T&gt;^ <span class="parameter">source</span>, 
	TCardinality <span class="parameter">zero</span>, 
	TCardinality <span class="parameter">one</span>, 
	TCardinality <span class="parameter">many</span>
)</pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">ExtensionAttribute</span>&gt;]
<span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">TrySingle</span> : 
        <span class="parameter">source</span> : <span class="identifier">IEnumerable</span>&lt;'T&gt; * 
        <span class="parameter">zero</span> : 'TCardinality * 
        <span class="parameter">one</span> : 'TCardinality * 
        <span class="parameter">many</span> : 'TCardinality <span class="keyword">-&gt;</span> <span class="identifier">ValueTuple</span>&lt;'TCardinality, 'T&gt; 
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">source</span></dt><dd>Type: <span class="nolink">System.Collections.Generic<span id="LST16620DC2_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_9?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IEnumerable</span><span id="LST16620DC2_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_10?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="selflink"><span class="typeparameter">T</span></span><span id="LST16620DC2_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_11?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />The source sequence.</dd><dt><span class="parameter">zero</span></dt><dd>Type: <span class="selflink"><span class="typeparameter">TCardinality</span></span><br />
            The value that is returned in the tuple if the sequence has zero
            elements.</dd><dt><span class="parameter">one</span></dt><dd>Type: <span class="selflink"><span class="typeparameter">TCardinality</span></span><br />
            The value that is returned in the tuple if the sequence has a
            single element only.</dd><dt><span class="parameter">many</span></dt><dd>Type: <span class="selflink"><span class="typeparameter">TCardinality</span></span><br />
            The value that is returned in the tuple if the sequence has two or
            more elements.</dd></dl><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">T</span></dt><dd>
            The type of the elements of <span class="parameter">source</span>.</dd><dt><span class="parameter">TCardinality</span></dt><dd>
            The type that expresses cardinality.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <span class="nolink">ValueTuple</span><span id="LST16620DC2_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_12?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="selflink"><span class="typeparameter">TCardinality</span></span>, <span class="selflink"><span class="typeparameter">T</span></span><span id="LST16620DC2_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_13?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />
            A tuple containing the identified <span class="typeparameter">TCardinality</span>
            and either the single value of <span class="typeparameter">T</span> in the sequence
            or its default value.<h4 class="subHeading">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <span class="nolink">IEnumerable</span><span id="LST16620DC2_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_14?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="selflink"><span class="typeparameter">T</span></span><span id="LST16620DC2_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST16620DC2_15?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="http://msdn.microsoft.com/en-us/library/bb384936.aspx" target="_blank">Extension Methods (Visual Basic)</a> or <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx" target="_blank">Extension Methods (C# Programming Guide)</a>.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection">
            This operator uses immediate execution, but never consumes more
            than two elements from the sequence.
            </div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_MoreLinq_Experimental_ExperimentalEnumerable.htm">ExperimentalEnumerable Class</a></div><div class="seeAlsoStyle"><a href="Overload_MoreLinq_Experimental_ExperimentalEnumerable_TrySingle.htm">TrySingle Overload</a></div><div class="seeAlsoStyle"><a href="N_MoreLinq_Experimental.htm">MoreLinq.Experimental Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank">© 2008 Jonathan Skeet. Portions © 2009 Atif Aziz, Chris Ammerman, Konrad Rudolph. Portions © 2010 Johannes Rudolph, Leopold Bushkin. Portions © 2015 Felipe Sateler, “sholland”. Portions © 2016 Andreas Gullberg Larsen, Leandro F. Vieira (leandromoh). Portions © 2017 Jonas Nyrup (jnyrup). Portions © Microsoft. All rights reserved.</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:morelinq-dev%40googlegroups.com?Subject=MoreLinq">MoreLinq Google Groups</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>