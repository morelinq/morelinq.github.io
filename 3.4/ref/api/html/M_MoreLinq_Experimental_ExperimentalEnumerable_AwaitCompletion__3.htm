<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>ExperimentalEnumerable.AwaitCompletion&lt;T, TTaskResult, TResult&gt; Method</title><meta name="Title" content="AwaitCompletion&lt;T, TTaskResult, TResult&gt;" /><meta name="Help.Id" content="M:MoreLinq.Experimental.ExperimentalEnumerable.AwaitCompletion``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``1},``2})" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="MoreLinq.Experimental" /><meta name="guid" content="M_MoreLinq_Experimental_ExperimentalEnumerable_AwaitCompletion__3" /><meta name="Description" content="Awaits completion of all asynchronous evaluations irrespective of whether they succeed or fail. An additional argument specifies a function that projects the final result given the source item and completed task." /><meta name="tocFile" content="../toc/IDABB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">MoreLinq</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Experimental<wbr />Enumerable<span id="LST70DA82C4_0" data-languageSpecificText="cpp=::|nu=."></span>Await<wbr />Completion<span id="LST70DA82C4_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span>, <span class="typeparameter">TTaskResult</span>, <span class="typeparameter">TResult</span><span id="LST70DA82C4_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Method</h1><div class="summary">
            Awaits completion of all asynchronous evaluations irrespective of
            whether they succeed or fail. An additional argument specifies a
            function that projects the final result given the source item and
            completed task.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_MoreLinq_Experimental.htm">MoreLinq.Experimental</a><br /><strong>Assembly:</strong> MoreLinq (in MoreLinq.dll) Version: 3.4.0+b99a6a8cc504caf2d48372fe54a2f8116c59cd0c<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">IAwaitQuery</span>&lt;TResult&gt; <span class="identifier">AwaitCompletion</span>&lt;T, TTaskResult, TResult&gt;(
	<span class="keyword">this</span> <span class="identifier">IEnumerable</span>&lt;T&gt; <span class="parameter">source</span>,
	<span class="identifier">Func</span>&lt;T, <span class="identifier">CancellationToken</span>, <span class="identifier">Task</span>&lt;TTaskResult&gt;&gt; <span class="parameter">evaluator</span>,
	<span class="identifier">Func</span>&lt;T, <span class="identifier">Task</span>&lt;TTaskResult&gt;, TResult&gt; <span class="parameter">resultSelector</span>
)
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb">&lt;<span class="identifier">ExtensionAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">AwaitCompletion</span>(<span class="keyword">Of</span> T, TTaskResult, TResult) ( 
	<span class="parameter">source</span> <span class="keyword">As</span> <span class="identifier">IEnumerable</span>(<span class="keyword">Of</span> T),
	<span class="parameter">evaluator</span> <span class="keyword">As</span> <span class="identifier">Func</span>(<span class="keyword">Of</span> T, <span class="identifier">CancellationToken</span>, <span class="identifier">Task</span>(<span class="keyword">Of</span> TTaskResult)),
	<span class="parameter">resultSelector</span> <span class="keyword">As</span> <span class="identifier">Func</span>(<span class="keyword">Of</span> T, <span class="identifier">Task</span>(<span class="keyword">Of</span> TTaskResult), TResult)
) <span class="keyword">As</span> <span class="identifier">IAwaitQuery</span>(<span class="keyword">Of</span> TResult)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
[<span class="identifier">ExtensionAttribute</span>]
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TTaskResult, <span class="keyword">typename</span> TResult&gt;
<span class="keyword">static</span> <span class="identifier">IAwaitQuery</span>&lt;TResult&gt;^ <span class="identifier">AwaitCompletion</span>(
	<span class="identifier">IEnumerable</span>&lt;T&gt;^ <span class="parameter">source</span>, 
	<span class="identifier">Func</span>&lt;T, <span class="identifier">CancellationToken</span>, <span class="identifier">Task</span>&lt;TTaskResult&gt;^&gt;^ <span class="parameter">evaluator</span>, 
	<span class="identifier">Func</span>&lt;T, <span class="identifier">Task</span>&lt;TTaskResult&gt;^, TResult&gt;^ <span class="parameter">resultSelector</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">ExtensionAttribute</span>&gt;]
<span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">AwaitCompletion</span> : 
        <span class="parameter">source</span> : <span class="identifier">IEnumerable</span>&lt;'T&gt; * 
        <span class="parameter">evaluator</span> : <span class="identifier">Func</span>&lt;'T, <span class="identifier">CancellationToken</span>, <span class="identifier">Task</span>&lt;'TTaskResult&gt;&gt; * 
        <span class="parameter">resultSelector</span> : <span class="identifier">Func</span>&lt;'T, <span class="identifier">Task</span>&lt;'TTaskResult&gt;, 'TResult&gt; <span class="keyword">-&gt;</span> <span class="identifier">IAwaitQuery</span>&lt;'TResult&gt; </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">source</span>  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LST70DA82C4_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LST70DA82C4_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>The source sequence.</dd><dt class="has-text-weight-normal"><span class="parameter">evaluator</span>  <a href="https://learn.microsoft.com/dotnet/api/system.func-3" target="_blank" rel="noopener noreferrer">Func</a><span id="LST70DA82C4_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span>, <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">CancellationToken</a>, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noopener noreferrer">Task</a><span id="LST70DA82C4_6" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TTaskResult</span></span><span id="LST70DA82C4_7" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><span id="LST70DA82C4_8" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>A function to begin the asynchronous
            evaluation of each element, the second parameter of which is a
            <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">CancellationToken</a> that can be used to abort
            asynchronous operations.</dd><dt class="has-text-weight-normal"><span class="parameter">resultSelector</span>  <a href="https://learn.microsoft.com/dotnet/api/system.func-3" target="_blank" rel="noopener noreferrer">Func</a><span id="LST70DA82C4_9" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span>, <a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1" target="_blank" rel="noopener noreferrer">Task</a><span id="LST70DA82C4_10" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TTaskResult</span></span><span id="LST70DA82C4_11" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <span class="selflink"><span class="typeparameter">TResult</span></span><span id="LST70DA82C4_12" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>A function that projects the final
            result given the source item and its asynchronous completion
            result.</dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>The type of the source elements.</dd><dt class="has-text-weight-normal"><span class="parameter">TTaskResult</span></dt><dd> The type of the task's result.</dd><dt class="has-text-weight-normal"><span class="parameter">TResult</span></dt><dd>The type of the result elements.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="T_MoreLinq_Experimental_IAwaitQuery_1.htm">IAwaitQuery</a><span id="LST70DA82C4_13" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TResult</span></span><span id="LST70DA82C4_14" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />
            A sequence query that stream its results as they are
            evaluated asynchronously.
            <h4 class="quickLinkHeader">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LST70DA82C4_15" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LST70DA82C4_16" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (Visual Basic)</a> or <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (C# Programming Guide)</a>.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDICSection"><p>
            This method uses deferred execution semantics. The results are
            yielded as each asynchronous evaluation completes and, by default,
            not guaranteed to be based on the source sequence order. If order
            is important, compose further with
            <a href="M_MoreLinq_Experimental_ExperimentalEnumerable_AsOrdered__1.htm">AsOrdered<span id="LST70DA82C4_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IAwaitQuery<span id="LST70DA82C4_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a>.</p><p>
            This method starts a new task where the asynchronous evaluations
            take place and awaited. If the resulting sequence is partially
            consumed then there's a good chance that some projection work will
            be wasted and a cooperative effort is done that depends on the
            <span class="parameter">evaluator</span> function (via a
            <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">CancellationToken</a> as its second argument) to cancel
            those in flight.</p><p>
            The <span class="parameter">evaluator</span> function should be designed to be
            thread-agnostic.</p><p>
            The task returned by <span class="parameter">evaluator</span> should be started
            when the function is called (and not just a mere projection)
            otherwise changing concurrency options via
            <a href="M_MoreLinq_Experimental_ExperimentalEnumerable_AsSequential__1.htm">AsSequential<span id="LST70DA82C4_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IAwaitQuery<span id="LST70DA82C4_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a>, <a href="M_MoreLinq_Experimental_ExperimentalEnumerable_MaxConcurrency__1.htm">MaxConcurrency<span id="LST70DA82C4_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IAwaitQuery<span id="LST70DA82C4_27" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_28" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a> or
            <a href="M_MoreLinq_Experimental_ExperimentalEnumerable_UnboundedConcurrency__1.htm">UnboundedConcurrency<span id="LST70DA82C4_29" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IAwaitQuery<span id="LST70DA82C4_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST70DA82C4_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> will only change how many
            tasks are awaited at any given moment, not how many will be
            kept in flight.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="T_MoreLinq_Experimental_ExperimentalEnumerable.htm">ExperimentalEnumerable Class</a></div><div><a href="N_MoreLinq_Experimental.htm">MoreLinq.Experimental Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Return Value</a></li><li><a class="quickLink">Usage Note</a></li></ul></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener noreferrer">© 2008 Jonathan Skeet. Portions © 2009 Atif Aziz, Chris Ammerman, Konrad Rudolph. Portions © 2010 Johannes Rudolph, Leopold Bushkin. Portions © 2015 Felipe Sateler, “sholland”. Portions © 2016 Andreas Gullberg Larsen, Leandro F. Vieira (leandromoh). Portions © 2017 Jonas Nyrup (jnyrup). Portions © Microsoft. All rights reserved.</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:morelinq-dev%40googlegroups.com?Subject=MoreLinq">MoreLinq Google Groups</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>